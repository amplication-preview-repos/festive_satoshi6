/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Psv } from "./Psv";
import { PsvCountArgs } from "./PsvCountArgs";
import { PsvFindManyArgs } from "./PsvFindManyArgs";
import { PsvFindUniqueArgs } from "./PsvFindUniqueArgs";
import { CreatePsvArgs } from "./CreatePsvArgs";
import { UpdatePsvArgs } from "./UpdatePsvArgs";
import { DeletePsvArgs } from "./DeletePsvArgs";
import { Route } from "../../route/base/Route";
import { PsvService } from "../psv.service";
@graphql.Resolver(() => Psv)
export class PsvResolverBase {
  constructor(protected readonly service: PsvService) {}

  async _psvsMeta(
    @graphql.Args() args: PsvCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Psv])
  async psvs(@graphql.Args() args: PsvFindManyArgs): Promise<Psv[]> {
    return this.service.psvs(args);
  }

  @graphql.Query(() => Psv, { nullable: true })
  async psv(@graphql.Args() args: PsvFindUniqueArgs): Promise<Psv | null> {
    const result = await this.service.psv(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Psv)
  async createPsv(@graphql.Args() args: CreatePsvArgs): Promise<Psv> {
    return await this.service.createPsv({
      ...args,
      data: {
        ...args.data,

        route: args.data.route
          ? {
              connect: args.data.route,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Psv)
  async updatePsv(@graphql.Args() args: UpdatePsvArgs): Promise<Psv | null> {
    try {
      return await this.service.updatePsv({
        ...args,
        data: {
          ...args.data,

          route: args.data.route
            ? {
                connect: args.data.route,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Psv)
  async deletePsv(@graphql.Args() args: DeletePsvArgs): Promise<Psv | null> {
    try {
      return await this.service.deletePsv(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Route, {
    nullable: true,
    name: "route",
  })
  async getRoute(@graphql.Parent() parent: Psv): Promise<Route | null> {
    const result = await this.service.getRoute(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
