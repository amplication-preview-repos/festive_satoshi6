/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PsvService } from "../psv.service";
import { PsvCreateInput } from "./PsvCreateInput";
import { Psv } from "./Psv";
import { PsvFindManyArgs } from "./PsvFindManyArgs";
import { PsvWhereUniqueInput } from "./PsvWhereUniqueInput";
import { PsvUpdateInput } from "./PsvUpdateInput";

export class PsvControllerBase {
  constructor(protected readonly service: PsvService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Psv })
  async createPsv(@common.Body() data: PsvCreateInput): Promise<Psv> {
    return await this.service.createPsv({
      data: {
        ...data,

        route: data.route
          ? {
              connect: data.route,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        fare: true,
        id: true,
        name: true,

        route: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Psv] })
  @ApiNestedQuery(PsvFindManyArgs)
  async psvs(@common.Req() request: Request): Promise<Psv[]> {
    const args = plainToClass(PsvFindManyArgs, request.query);
    return this.service.psvs({
      ...args,
      select: {
        createdAt: true,
        fare: true,
        id: true,
        name: true,

        route: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Psv })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async psv(@common.Param() params: PsvWhereUniqueInput): Promise<Psv | null> {
    const result = await this.service.psv({
      where: params,
      select: {
        createdAt: true,
        fare: true,
        id: true,
        name: true,

        route: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Psv })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePsv(
    @common.Param() params: PsvWhereUniqueInput,
    @common.Body() data: PsvUpdateInput
  ): Promise<Psv | null> {
    try {
      return await this.service.updatePsv({
        where: params,
        data: {
          ...data,

          route: data.route
            ? {
                connect: data.route,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          fare: true,
          id: true,
          name: true,

          route: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Psv })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePsv(
    @common.Param() params: PsvWhereUniqueInput
  ): Promise<Psv | null> {
    try {
      return await this.service.deletePsv({
        where: params,
        select: {
          createdAt: true,
          fare: true,
          id: true,
          name: true,

          route: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
