/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PickUpDropOffPoint } from "./PickUpDropOffPoint";
import { PickUpDropOffPointCountArgs } from "./PickUpDropOffPointCountArgs";
import { PickUpDropOffPointFindManyArgs } from "./PickUpDropOffPointFindManyArgs";
import { PickUpDropOffPointFindUniqueArgs } from "./PickUpDropOffPointFindUniqueArgs";
import { CreatePickUpDropOffPointArgs } from "./CreatePickUpDropOffPointArgs";
import { UpdatePickUpDropOffPointArgs } from "./UpdatePickUpDropOffPointArgs";
import { DeletePickUpDropOffPointArgs } from "./DeletePickUpDropOffPointArgs";
import { Route } from "../../route/base/Route";
import { PickUpDropOffPointService } from "../pickUpDropOffPoint.service";
@graphql.Resolver(() => PickUpDropOffPoint)
export class PickUpDropOffPointResolverBase {
  constructor(protected readonly service: PickUpDropOffPointService) {}

  async _pickUpDropOffPointsMeta(
    @graphql.Args() args: PickUpDropOffPointCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PickUpDropOffPoint])
  async pickUpDropOffPoints(
    @graphql.Args() args: PickUpDropOffPointFindManyArgs
  ): Promise<PickUpDropOffPoint[]> {
    return this.service.pickUpDropOffPoints(args);
  }

  @graphql.Query(() => PickUpDropOffPoint, { nullable: true })
  async pickUpDropOffPoint(
    @graphql.Args() args: PickUpDropOffPointFindUniqueArgs
  ): Promise<PickUpDropOffPoint | null> {
    const result = await this.service.pickUpDropOffPoint(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PickUpDropOffPoint)
  async createPickUpDropOffPoint(
    @graphql.Args() args: CreatePickUpDropOffPointArgs
  ): Promise<PickUpDropOffPoint> {
    return await this.service.createPickUpDropOffPoint({
      ...args,
      data: {
        ...args.data,

        route: args.data.route
          ? {
              connect: args.data.route,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => PickUpDropOffPoint)
  async updatePickUpDropOffPoint(
    @graphql.Args() args: UpdatePickUpDropOffPointArgs
  ): Promise<PickUpDropOffPoint | null> {
    try {
      return await this.service.updatePickUpDropOffPoint({
        ...args,
        data: {
          ...args.data,

          route: args.data.route
            ? {
                connect: args.data.route,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PickUpDropOffPoint)
  async deletePickUpDropOffPoint(
    @graphql.Args() args: DeletePickUpDropOffPointArgs
  ): Promise<PickUpDropOffPoint | null> {
    try {
      return await this.service.deletePickUpDropOffPoint(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Route, {
    nullable: true,
    name: "route",
  })
  async getRoute(
    @graphql.Parent() parent: PickUpDropOffPoint
  ): Promise<Route | null> {
    const result = await this.service.getRoute(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
