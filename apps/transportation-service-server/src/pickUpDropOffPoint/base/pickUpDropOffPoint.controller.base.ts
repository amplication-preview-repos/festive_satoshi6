/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PickUpDropOffPointService } from "../pickUpDropOffPoint.service";
import { PickUpDropOffPointCreateInput } from "./PickUpDropOffPointCreateInput";
import { PickUpDropOffPoint } from "./PickUpDropOffPoint";
import { PickUpDropOffPointFindManyArgs } from "./PickUpDropOffPointFindManyArgs";
import { PickUpDropOffPointWhereUniqueInput } from "./PickUpDropOffPointWhereUniqueInput";
import { PickUpDropOffPointUpdateInput } from "./PickUpDropOffPointUpdateInput";

export class PickUpDropOffPointControllerBase {
  constructor(protected readonly service: PickUpDropOffPointService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PickUpDropOffPoint })
  async createPickUpDropOffPoint(
    @common.Body() data: PickUpDropOffPointCreateInput
  ): Promise<PickUpDropOffPoint> {
    return await this.service.createPickUpDropOffPoint({
      data: {
        ...data,

        route: data.route
          ? {
              connect: data.route,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        location: true,
        name: true,

        route: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PickUpDropOffPoint] })
  @ApiNestedQuery(PickUpDropOffPointFindManyArgs)
  async pickUpDropOffPoints(
    @common.Req() request: Request
  ): Promise<PickUpDropOffPoint[]> {
    const args = plainToClass(PickUpDropOffPointFindManyArgs, request.query);
    return this.service.pickUpDropOffPoints({
      ...args,
      select: {
        createdAt: true,
        id: true,
        location: true,
        name: true,

        route: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PickUpDropOffPoint })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async pickUpDropOffPoint(
    @common.Param() params: PickUpDropOffPointWhereUniqueInput
  ): Promise<PickUpDropOffPoint | null> {
    const result = await this.service.pickUpDropOffPoint({
      where: params,
      select: {
        createdAt: true,
        id: true,
        location: true,
        name: true,

        route: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PickUpDropOffPoint })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePickUpDropOffPoint(
    @common.Param() params: PickUpDropOffPointWhereUniqueInput,
    @common.Body() data: PickUpDropOffPointUpdateInput
  ): Promise<PickUpDropOffPoint | null> {
    try {
      return await this.service.updatePickUpDropOffPoint({
        where: params,
        data: {
          ...data,

          route: data.route
            ? {
                connect: data.route,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          location: true,
          name: true,

          route: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PickUpDropOffPoint })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePickUpDropOffPoint(
    @common.Param() params: PickUpDropOffPointWhereUniqueInput
  ): Promise<PickUpDropOffPoint | null> {
    try {
      return await this.service.deletePickUpDropOffPoint({
        where: params,
        select: {
          createdAt: true,
          id: true,
          location: true,
          name: true,

          route: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
