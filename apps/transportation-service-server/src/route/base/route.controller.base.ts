/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RouteService } from "../route.service";
import { RouteCreateInput } from "./RouteCreateInput";
import { Route } from "./Route";
import { RouteFindManyArgs } from "./RouteFindManyArgs";
import { RouteWhereUniqueInput } from "./RouteWhereUniqueInput";
import { RouteUpdateInput } from "./RouteUpdateInput";
import { PickUpDropOffPointFindManyArgs } from "../../pickUpDropOffPoint/base/PickUpDropOffPointFindManyArgs";
import { PickUpDropOffPoint } from "../../pickUpDropOffPoint/base/PickUpDropOffPoint";
import { PickUpDropOffPointWhereUniqueInput } from "../../pickUpDropOffPoint/base/PickUpDropOffPointWhereUniqueInput";
import { PsvFindManyArgs } from "../../psv/base/PsvFindManyArgs";
import { Psv } from "../../psv/base/Psv";
import { PsvWhereUniqueInput } from "../../psv/base/PsvWhereUniqueInput";

export class RouteControllerBase {
  constructor(protected readonly service: RouteService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Route })
  async createRoute(@common.Body() data: RouteCreateInput): Promise<Route> {
    return await this.service.createRoute({
      data: data,
      select: {
        createdAt: true,
        distance: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Route] })
  @ApiNestedQuery(RouteFindManyArgs)
  async routes(@common.Req() request: Request): Promise<Route[]> {
    const args = plainToClass(RouteFindManyArgs, request.query);
    return this.service.routes({
      ...args,
      select: {
        createdAt: true,
        distance: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Route })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async route(
    @common.Param() params: RouteWhereUniqueInput
  ): Promise<Route | null> {
    const result = await this.service.route({
      where: params,
      select: {
        createdAt: true,
        distance: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Route })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRoute(
    @common.Param() params: RouteWhereUniqueInput,
    @common.Body() data: RouteUpdateInput
  ): Promise<Route | null> {
    try {
      return await this.service.updateRoute({
        where: params,
        data: data,
        select: {
          createdAt: true,
          distance: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Route })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRoute(
    @common.Param() params: RouteWhereUniqueInput
  ): Promise<Route | null> {
    try {
      return await this.service.deleteRoute({
        where: params,
        select: {
          createdAt: true,
          distance: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/pickUpDropOffPoints")
  @ApiNestedQuery(PickUpDropOffPointFindManyArgs)
  async findPickUpDropOffPoints(
    @common.Req() request: Request,
    @common.Param() params: RouteWhereUniqueInput
  ): Promise<PickUpDropOffPoint[]> {
    const query = plainToClass(PickUpDropOffPointFindManyArgs, request.query);
    const results = await this.service.findPickUpDropOffPoints(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        location: true,
        name: true,

        route: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/pickUpDropOffPoints")
  async connectPickUpDropOffPoints(
    @common.Param() params: RouteWhereUniqueInput,
    @common.Body() body: PickUpDropOffPointWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pickUpDropOffPoints: {
        connect: body,
      },
    };
    await this.service.updateRoute({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/pickUpDropOffPoints")
  async updatePickUpDropOffPoints(
    @common.Param() params: RouteWhereUniqueInput,
    @common.Body() body: PickUpDropOffPointWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pickUpDropOffPoints: {
        set: body,
      },
    };
    await this.service.updateRoute({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/pickUpDropOffPoints")
  async disconnectPickUpDropOffPoints(
    @common.Param() params: RouteWhereUniqueInput,
    @common.Body() body: PickUpDropOffPointWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pickUpDropOffPoints: {
        disconnect: body,
      },
    };
    await this.service.updateRoute({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/psvs")
  @ApiNestedQuery(PsvFindManyArgs)
  async findPsvs(
    @common.Req() request: Request,
    @common.Param() params: RouteWhereUniqueInput
  ): Promise<Psv[]> {
    const query = plainToClass(PsvFindManyArgs, request.query);
    const results = await this.service.findPsvs(params.id, {
      ...query,
      select: {
        createdAt: true,
        fare: true,
        id: true,
        name: true,

        route: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/psvs")
  async connectPsvs(
    @common.Param() params: RouteWhereUniqueInput,
    @common.Body() body: PsvWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      psvs: {
        connect: body,
      },
    };
    await this.service.updateRoute({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/psvs")
  async updatePsvs(
    @common.Param() params: RouteWhereUniqueInput,
    @common.Body() body: PsvWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      psvs: {
        set: body,
      },
    };
    await this.service.updateRoute({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/psvs")
  async disconnectPsvs(
    @common.Param() params: RouteWhereUniqueInput,
    @common.Body() body: PsvWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      psvs: {
        disconnect: body,
      },
    };
    await this.service.updateRoute({
      where: params,
      data,
      select: { id: true },
    });
  }
}
